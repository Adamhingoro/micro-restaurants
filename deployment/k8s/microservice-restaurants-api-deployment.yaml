apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    service: microservice-restaurants-api
  name: microservice-restaurants-api
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: microservice-restaurants-api
        api: external        
    spec:
      containers:
      - image: adamhingoro/restaurant-microservice-restaurants-api:latest
        name: microservice-restaurants-api
        imagePullPolicy: Always          
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "1024Mi"
            cpu: "200m"                
        env:
          - name: URL
            value: "http://restaurant-reverseproxy:8080"
          - name: AWS_BUCKET
            valueFrom:
              configMapKeyRef:
                name: env-config
                key: AWS_BUCKET
          - name: AWS_PROFILE
            valueFrom:
              configMapKeyRef:
                name: env-config
                key: AWS_PROFILE
          - name: AWS_REGION
            valueFrom:
              configMapKeyRef:
                name: env-config
                key: AWS_REGION
          - name: JWT_SECRET
            valueFrom:
              configMapKeyRef:
                name: env-config
                key: JWT_SECRET
          - name: POSTGRESS_DB
            valueFrom:
              configMapKeyRef:
                name: env-config
                key: POSTGRESS_DB
          - name: POSTGRESS_HOST
            valueFrom:
              configMapKeyRef:
                name: env-config
                key: POSTGRESS_HOST
          - name: POSTGRESS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: env-secret
                key: POSTGRESS_PASSWORD
          - name: POSTGRESS_USERNAME
            valueFrom:
              secretKeyRef:
                name: env-secret
                key: POSTGRESS_USERNAME
        volumeMounts:
          - name: aws-secret
            mountPath: "/root/.aws/"
            readOnly: true 
      restartPolicy: Always
      volumes:
        - name: aws-secret
          secret:
            secretName: aws-secret
